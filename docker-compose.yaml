services:
    # Nginx
    nginx:
        image: nginx:alpine
        container_name: nginx
        ports:
            - "80:80"
            - "443:8443"
        restart: on-failure
        volumes:
            - ./config/nginx.local.conf:/etc/nginx/nginx.conf
            - ./config/nginx-certs:/etc/nginx/certs
        depends_on:
            - api
            - streamlit
        networks:
            - mcp-network

    # LocalStack for S3 emulation
    localstack:
        image: localstack/localstack:0.12.5
        container_name: localstack
        platform: linux/amd64
        ports:
            - "4566:4566"
            - "4572:4572"
        volumes:
            - "./localstack:/tmp/localstack"
            - "/var/run/docker.sock:/var/run/docker.sock"
        env_file:
            - .env
        environment:
            - SERVICES=s3
            - DEBUG=1
            - DATA_DIR=/tmp/localstack/data
            - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - AWS_DEFAULT_REGION=${AWS_REGION}
        networks:
            - mcp-network

    # Postgres Database
    postgres:
        image: pgvector/pgvector:pg17
        container_name: postgres
        env_file:
            - .env
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
        ports:
            - "5435:5432"
        volumes:
            - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres"]
            interval: 5s
            timeout: 5s
            retries: 5
        networks:
            - mcp-network

    # MCP Server 1 (S3 Search Service)
    mcp_server1:
        build:
            context: .
            dockerfile: ./workspace/servers/Dockerfile.mcp_server1
        container_name: mcp_server1
        ports:
            - "8001:8001"
        env_file:
            - .env
        environment:
            - PYTHONUNBUFFERED=1
            - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            - AWS_REGION=${AWS_REGION}
            - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
        depends_on:
            - localstack
        command: python /app/workspace/servers/mcp_server_1.py
        networks:
            - mcp-network

    # MCP Server 2 (Postgres Search Service)
    mcp_server2:
        build:
            context: .
            dockerfile: ./workspace/servers/Dockerfile.mcp_server2
        container_name: mcp_server2
        ports:
            - "8002:8002"
        env_file:
            - .env
        environment:
            - PYTHONUNBUFFERED=1
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
        depends_on:
            postgres:
                condition: service_healthy
        command: python /app/workspace/servers/mcp_server_2.py
        networks:
            - mcp-network

    mcp_server3:
        build:
            context: .
            dockerfile: ./workspace/servers/Dockerfile.mcp_server3
        container_name: mcp_server3
        ports:
            - "8003:8003"
        env_file:
            - .env
        environment:
            - PYTHONUNBUFFERED=1
            - OPENAI_API_KEY=${OPENAI_API_KEY}
            - OPENAI_BASE_URL=${OPENAI_BASE_URL}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable
        depends_on:
            postgres:
                condition: service_healthy
        command: python /app/workspace/servers/mcp_server_3.py
        networks:
            - mcp-network

    # NestJS API
    api:
        build:
            context: ./workspace/api/
            dockerfile: Dockerfile
        container_name: mcp_api
        ports:
            - "3000:3000"
        env_file:
            - .env
        environment:
            - PORT=3000
            - OPENAI_API_KEY=${OPENAI_API_KEY}
            - DATABASE_URL=${POSTGRES_URL}
            - S3_BUCKET_NAME=${S3_BUCKET_NAME}
            - MCP_S3_URL=http://mcp_server1:8001/sse
            - MCP_POSTGRES_URL=http://mcp_server2:8002/sse
            - MCP_RAG_URL=http://mcp_server3:8003/sse
        depends_on:
            - mcp_server1
            - mcp_server2
            - mcp_server3
        command: >
            sh -c "sleep 10 && npm run build && npm run start"
        networks:
            - mcp-network

    # Streamlit UI
    streamlit:
        build:
            context: ./workspace/frontend
            dockerfile: Dockerfile
        container_name: mcp_streamlit
        ports:
            - "3001:3001"
        environment:
            - PYTHONUNBUFFERED=1
            - API_URL=http://api:3000
        depends_on:
            - api
            - mcp_server1
            - mcp_server2
            - mcp_server3
        networks:
            - mcp-network

# Network configuration
networks:
    mcp-network:
        driver: bridge

# Volumes for persistent data
volumes:
    postgres_data:
